#!/bin/bash




size=1024 # central lambda [nm]
file="conf_size.txt"
if [ -f $file ]
	then
	size=$(echo "$(cat $file)")
	echo "size = $size pix"
fi



MdesignStepMax=13 #default
file="conf_MdesignStepMax.txt"
if [ -f $file ]
	then
	MdesignStepMax=$(echo "$(cat $file)")
	echo "Monochromatic Max design Step  = $MdesignStepMax %"
	ok=0
fi


errorfile="errorstatus.txt"
checkerrorstatus ()
{
if [ -f ${errorfile} ]
then
echo ""
echo "****** [$(date)] FATAL ERROR: script $0 : $(cat ${errorfile})"
echo "****** exit script $0"
echo "****** Manually remove file $errorfile to unlock"
echo "****** bye !"
echo ""
exit
fi
}


printhelp ()
{
	echo "------------------------------------------------------------------------------"
	echo ""
	echo "         TOP LEVEL SCRIPT FOR PIAACMC DESIGN AND EVALUATION"
	echo "               SEQUENCES OPERATIONS TO SCRIPT sim1024"
	echo "                MOST PARAMETERS ARE PASSED TO sim1024"
	echo ""
	echo ""
	echo ""
	echo "Syntax:"
	echo " $0 <1:command> <2:coin> <3:coout> <4:fpmrad> <5:lambda> <6:PIAAmaterial> <7:LStransm> <8:NBlyotstop> <9:mlambda> <10:mlambdaB> <11:NBrings> <12:maskradld> <13:ssize> <14:extmode> <15:fpmmaterial> <16:index>" 
	echo "Example : "
	echo " $0 optsingle    0.30     0.29       1.10       550          Mirror         0.75            4           850          10            22           1.60          15           0          Mirror      001"
	echo ""
	echo " 1 command:"
	echo "   optsingle       : (create and) optimize a configuration" 
	echo "   eval0           : compute contrast (only on-axis contrast and PSF)"
	echo "   eval1           : compute contrasts (compute on-axis and resolved source PSFs and contrasts)"
	echo "   eval2           : compute contrasts, transmission curve"
	echo "   psfcomploop     : loop PSF computation (to be used for WFC)"
	echo "                   will compute PSF every time a file named looppsfcomp appears"
	echo "                   loop will stop when file loopstop appears"
	echo "                   Files will appear in shared memory"
	echo
	echo "Arguments specific to PIAACMC design excluding focal plane mask :"
	echo " 2    coin         : input central obstruction"
	echo " 3    coout        : output central obstruction"
	echo " 4    fpmrad       : nominal PIAACMC focal plane mask radius"
	echo " 5    lambda       : design wavelength"
	echo " 6    PIAAmaterial : PIAA optics material"
	echo " 7    LStransm     : Lyot stops geometric transmission"
	echo " 8    NBlyotstop   : Number of Lyot stops"
	echo "Note: other settings are specified as conf_.txt files:"
	echo "            conf_size.txt            [default = 1024]  : array size                                $size pix"
	echo "            conf_MdesignStepMax.txt  [default = 13]    : max design step for monochromatic design  $MdesignStepMax" 
	echo ""
	echo ""
	echo "Arguments specific to PIAACMC focal plane mask :" 
	echo " 9    mlambda      : mask wavelength [nm]"
	echo " 10   mlambdaB     : mask bandwidth [%]"
	echo " 11   NBrings      : number of rings in the focal plane mask"
	echo " 12   maskradld    : physical mask radius [l/D]"
	echo " 13   ssize        : extended source radius [-10 log(rad)]. 00 if point source"
	echo " 14   extmode      : extended source mode (0: 3pts, 1: 6pts)"
	echo " 15   fpmmaterial  : material used for the focal plane mask"
	echo ""
	echo " 16   index"
	echo ""
	echo "------------------------------------------------------------------------------"
}

NBARGS=16

if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
	printhelp
if [ "$#" -ne $NBARGS ]; then
    echo "Illegal number of parameters ($NBARGS params required, $# entered)"
	echo "Illegal number of parameters ($NBARGS params required, $# entered)" > $errorfile
	checkerrorstatus
fi
	exit
fi




checkerrorstatus


# arguments related to PIAACMC optical design, expect focal plane mask
coin=$2   # input central obstruction (linear)
coout=$3  # output central obstruction (linear)
fpmrad=$4 # nominal PIAA focal plane mask radius
lambda=$5
PIAAmaterial="$6"
LStransm=$7
NBlyotstop=$8

# arguments related to focal plane mask design
mlambda=$9
mlambdaB=${10}
NBrings=${11}
maskradld=${12}
ssize=${13}
extmode=${14}
fpmmaterial="${15}"

# configuration index
index=${16}

# list of arguments passed to sim1024 :
# $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index


loopmode=0
nbDM=0

searchtime=3600.0
# search time [sec]

computetransmcurve=0



computecontrast=2
# 0: do not compute PSFs and contrast curves
# 1: compute only on-axis contrast and PSF
# 2: compute on-axis and resolved source (0.01 l/D) PSFs and contrasts
# 3: compute on-axis and resolved source (0.01 l/D, 0.03 l/D) PSFs and contrasts

inputmode=0




if [ $1 == "optsingle" ]; then
	echo "optimize single configuration (loop)"
	searchtime=7200.0
	computecontrast=0
	inputmode=2
fi

if [ $1 == "eval0" ]; then
	echo "Evaluate Solution"
	searchtime=0.0
	computetransmcurve=0
	computecontrast=1
	inputmode=3
fi

if [ $1 == "eval1" ]; then
	echo "Evaluate Solution"
	searchtime=0.0
	computetransmcurve=0
	computecontrast=3
	inputmode=3
fi

if [ $1 == "eval2" ]; then
	echo "Evaluate Solution"
	searchtime=0.0
	computetransmcurve=1
	computecontrast=3
	inputmode=3
fi



if [ $1 == "psfcomploop1" ]; then
	echo "Loop PSF compute, 1 DM"
	searchtime=0.0
	computetransmcurve=0
	computecontrast=1
	inputmode=3
	loopmode=1
	nbDM=1
fi









if [ $inputmode -eq 0 ]; then
	echo "ERROR: command $1 not recognized"
	exit
fi



reoptimize=1

NBlambda=20


echo "lambda = $lambda nm"









mzfpmoptimize ()
{
stepfile=$(printf "stepfile_fpmr%4.2f_coin%4.2f_coout%4.2f_sr%02d_l%04d_maskrad%4.2f_rings%03d_ss%02d" "$fpmrad" "$coin" "$coout" "$lambdaB" "$lambda" "$maskradld" "$NBrings" "$ssize")

if [ $reoptimize -eq 1 ]; then
	stepfiletest="bogus"
	else
	stepfiletest=$stepfile
fi



if [ ! -f ${stepfiletest} ]
then

# Turn focal plane mask into zones, Compute polychromatic response to zones, store result in FPMresp
echo "1" > conf_FPMsectors.txt
echo "$NBlambda" > conf_nblambda.txt


./sim$size 800 $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index # set configuration settings
checkerrorstatus
#$fpmrad $coin $coout $ssize $extmode $lambdaB $lambda $PIAAmaterial 800 000   # set configuration settings
./sim$size 101 $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index # compute FPMresp if not present
checkerrorstatus
# $fpmrad $coin $coout $ssize $extmode $lambdaB $lambda $PIAAmaterial 101 000   # compute FPMresp if not present

#./sim$size $fpmrad $coin $coout 00 0 $lambdaB $lambda $PIAAmaterial 210 000   # co-optimize fpm and PIAA shapes
#exit

# Search for optimal solution
echo "$searchtime" > searchtime.txt
./sim$size 102 $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index
checkerrorstatus
# $fpmrad $coin $coout $ssize $extmode $lambdaB $lambda $PIAAmaterial 102 000



# LOOP STUFF
loopOK=1
loopcnt=0
touch looppsfcomp
rm looppsfcomp_done


initlooppsf=0

while [ $loopOK -eq 1 ]; do
waitforfile looppsfcomp
rm looppsfcomp
echo "loopOK $loopcnt"
sleep 1
loopcnt=$(( $loopcnt + 1 ))




dirname=$( cat dirname.txt )
echo "dirname = $dirname"




# compute polychromatic PSF
if [ $computecontrast -eq 1 ]
then
execcode=$(( 720 + 10*$nbDM ))
echo "execcode = $execcode"
./sim$size $execcode $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index
checkerrorstatus
# $fpmrad $coin $coout $ssize $extmode $lambdaB $lambda $PIAAmaterial $execcode 000
fi



if [ $computecontrast -gt 1 ]
then
./sim$size 721 $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index
checkerrorstatus
#$fpmrad $coin $coout $ssize $extmode $lambdaB $lambda $PIAAmaterial 721 000
fi



if [ $computecontrast -eq 3 ]
then
./sim$size 722 $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index
checkerrorstatus
# $fpmrad $coin $coout $ssize $extmode $lambdaB $lambda $PIAAmaterial 722 000
fi


if [ $computetransmcurve -eq 1 ]
then
echo "computing transmission curve"
./sim$size 750 $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index
checkerrorstatus
#$fpmrad $coin $coout $ssize $extmode $lambdaB $lambda $PIAAmaterial 750 000
fi

touch looppsfcomp_done  # letting know other process that the PSF has been computed




# END OF LOOP STUFF
Cfits << EOF
creaimshm psfout $size $size $
quit
EOF

if [ $initlooppsf -eq 0 ]; then
Cfits << EOF
creaimshm psfout $size $size $NBlambda
creaimshm psfout_re $size $size $NBlambda
creaimshm psfout_im $size $size $NBlambda
exit
EOF
initlooppsf=1
fi
checkerrorstatus

# copy psf0 to shared memory
Cfits << EOF
readshmim psfout
readshmim psfout_re
readshmim psfout_im
loadfits "$dirname/psfi0.fits" psf
loadfits "$dirname/psfa0.fits" psfa
loadfits "$dirname/psfp0.fits" psfp
cp psf psfout
ap2c psfa psfp psfc
c2ri psfc psfre psfim
cp psfre psfout_re
cp psfim psfout_im
exit
EOF
checkerrorstatus

loopOK=0 # default: exit loop
if [ $loopmode -eq 1 ]; then
loopOK=1 # keep going
fi
if [ -f "loopstop" ]; then
loopOK=0
rm loopstop
fi 
done






# make focal plane mask OPD
#./sim$size $fpmrad 0.30 $2 00 0 $lambdaB $lambda 800 000

touch $stepfile

fi
}




funcprocess ()
{
file1="./status/design_coin${coin}_coout${coout}_fpmrad${fpmrad}_l${lambda}_${PIAAmaterial}_lt${LStransm}_nbls${NBlyotstop}_mono.txt"
echo "file1 : $file1"
if [ -f ${file1} ]
then
	echo "file ${file1} exists"		
else
	echo "file ${file1} does not exist"
		
	# if directory does not exist but monochromatic design reference exists, adopt it
	# otherwise, do nothing	
	./sim$size 501 $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index
	checkerrorstatus

	
	# PHASE 1: COMPUTE MONOCHROMATIC IDEAL PIAACMC

	# remove configuration settings : OBSOLETE will skip if already computed
#	./sim$size 801 $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index
#	checkerrorstatus
	
	./sim$size $MdesignStepMax $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index
	checkerrorstatus
	exit // TEST
	
	# copy solution as master reference (if it does not exist) for other lambda / lambdaB
	./sim$size 500 $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index
	checkerrorstatus
	
	# COMPUTE ON-AXIS PSF with idealized focal plane mask	
	./sim$size 700 $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index
	checkerrorstatus
	
	touch $file1
	
	./sim$size 802 $coin $coout $fpmrad $lambda $PIAAmaterial $LStransm $NBlyotstop $mlambda $mlambdaB $NBrings $maskradld $ssize $extmode $fpmmaterial $index # restores polychromatic conf
	checkerrorstatus
fi




# PHASE 2: POLYCHROMATIC, PHYSICAL MASKS
echo "POLYCHROMATIC MASK COMPUTATION"		

mzfpmoptimize
}







mkdir -p status
rm status/design_coin${coin}_coout${coout}_fpmrad${fpmrad}_l${lambda}_${PIAAmaterial}_lt${LStransm}_nbls${NBlyotstop}_mono.txt




# optsingle
if [ $inputmode -eq 2 ]; then
	reoptimize=1
	funcprocess								
fi



# eval single
if [ $inputmode -eq 3 ]; then
	reoptimize=1
	echo "Evaluating for fpmr = $maskradinput"
	fpmrad=$maskradinput
	echo "$fpmrad"			
	funcprocess							
	checkerrorstatus
fi






