#!/bin/bash


# APLCMC design example script / step by step operations
# run the commands in this script in the local working directory
# This script is meant to be run/read line by line to guide the user




# ===========================================
#    MAKE LOCAL COPY (SYM LINK) OF SCRIPTS
# ===========================================


# source code directory (change as needed)
srcdir="/home/olivier/src/Cfits/src/PIAACMCsimul/scripts"

ln -s $srcdir/syncscripts syncscripts
./syncscripts

# you should see the following scripts in the work directory:
# ./run
# ./runclean
# ./runopt
# ./runPIAACMC
# ./sim

# type "./run" (no arguments) to see current configuration parameters and write the parameters in ./conf directory
./run

# configuration parameters are listed as files: ./conf/conf_<PARAMETERNAME>.txt



# ===========================================
#    CREATE / IMPORT PUPIL
# ===========================================

# you may create / import your own pupil
# in this example, the pupil must be a 1024 x 1024 pixel FITS file, single precision floating point
# the pupil array size (1024 pix) must match the "size" parameter
# the pupil radius in this example is 200 pix, and must match beamrad/pscale
# the pupil central obstruction should match the coin parameter (0.3 in this example)
# if you wish to use your own pupil file, make sure you either match the array size and beam size (pix) of this example, or modify the size, beamrad, pscale and coin parameters according to your pupil file

# the name of the pupil file is "pup_1024.fits"


# examples directory (change as needed)
exampledir="/home/olivier/src/Cfits/src/PIAACMCsimul/examples"

cp $exampledir/pup_seg00_1024.fits pup_1024.fits




# ===========================================
#    SET PARAMETER VALUES FOR APLCMC
# ===========================================

# no PIAA optics (APLCMC)
echo "0" > ./conf/conf_PIAAmode.txt

# set pre-apodizer to pupil plane conjugation
echo "0.0" > ./conf/conf_prePIAA0maskpos.txt

# set output pupil mask radius to 1.0 
echo "1.0" > ./conf/conf_pupoutmaskrad.txt




# ===========================================
#    CREATE APLCMC MONOCHROMATIC DESIGN
# ===========================================

# create apodization profile (prolate spheroidal) for the pupil
./run optsingle 1

# this operation should take approximately 2 minutes

# The following files will be created:

# Cmodes_1024.fits : Cosine modes
# Fmodes_1024.fits : Fourier modes

# in ./piaacmcconf_i000 directory :
# WFamp0_xxx.fits and WFpha0_xxx.fits: amplitude and phase in specific planes
# conjugations.txt : list of planes and conjugation distance to reference
# apo2Drad.fits  : amplitude apodization (entirely allocated to pre-apodizer)

# Note: for the APLCMC, the monochromatic design is completed in step 1, and further steps are de-activated





# ===========================================
#    FOCAL PLANE MASK DESIGN
# ===========================================

# select focal plane mask type: SiO2, transmission mask
echo "SiO2" > conf/conf_fpmmaterial.txt

# hexagonal tiling
echo "2" > conf/conf_FPMsectors.txt

# outer radius = 2.5 l/D
echo "3.0" > conf/conf_maskradld.txt

# 24 rings
echo "32" > conf/conf_NBrings.txt

echo "-2.0e-6" > conf/conf_fpmminsag.txt
echo "2.0e-6" > conf/conf_fpmmaxsag.txt

# note:
# 32 rings, 3.0 l/D -> Average contrast = 8.31811e-05
# Average contrast = 6.3575e-05

# START FOCAL PLANE MASK DESIGN
./run optsingle 200

# this command will run for a few hrs if the number of focal plane mask zones is large
# the complex amplitude response of each mask zone is computed 
# Several sub-processes are launched, each computing a subset of the total number of zones
# you can follow the progress of each subprocess in the corresponding tmux sessions
# the tmux session names are PID followed by FPMt<index>n<NBindex>
#
# as each subprocess computes zone responses, they are stored in FITS files FPMresp..._thread<index>.fits.tmp
# you can open/view these files to follow progress - each zone appears as a line, and files should fill from the bottom to the top
#
# when all threads complete, the files are merged into a single FPMresp file: FPMresp....fits
# The optimizer then searches for the optimal solution for 7200 sec
# progress can be tracked by monitoring the file named "mode13_.....opt.txt" (use tail -f command)
# the 5th number, which is in "( .. )" shows the current best value for contrast
# 
# To stop the optimizer, create/edit a file named "searchtime.txt" and enter a small value (for example 100.0) which defines the maximum search time, and wait for the process to end
#
# you can track progress against the search time by displaying file timeused.txt
#
#
# the optimizer can be launched again, and will reset the search time to 7200 sec
#

# ===========================================
#    ANALYZING RESULTS
# ===========================================


# run polychromatic propagation
./run proppoly 1
# computes polychromatic PSF - takes approximately 20mn






